//6: Faça um programa que cria dois arrays bidimensionais de double de dimensões informadas pelo usuário pelo teclado.
// Em seguida, preencha as posições dos arrays também com valores obtidos via teclado. 
// Depois disso, seu programa deve criar um array unidimensional que possui todos os elementos negativos (dos dois arrays)
//  na primeira parte e todos os elementos positivos e zero (dos dois arrays) na segunda parte.
#include <stdio.h>

int main(){
    int numI;
    int numJ;

    int num2I;
    int num2J;

    printf("qual o tam da coluna do array 1: ");
    scanf("%d", &numJ);
    printf("qual o tam da linha do array 1: ");
    scanf("%d", &numI);
    printf("qual o tam da coluna do array 2: ");
    scanf("%d", &num2J);
    printf("qual o tam da linha do array 2: ");
    scanf("%d", &num2I);

    int numbers1[numI][numJ];
    int numbers2[num2I][num2J];
    int x = (numI*num2I)+(num2I*num2J);

    for (int i=0; i<numI; i++){
        for(int j=0; j<numJ; j++){
        printf("digite um valor para numbers1[%d][%d] ", numbers1[i][j]);
        scanf("%lf", &numbers1[i][j]);
        }
    }
    
    for(int aI=0; aI<num2I; aI++){
        for(int bJ; bJ<num2J; bJ++){
            printf("digite um valor para numbers2[%d][%d] ", numbers2[aI][bJ]);
            scanf("%lf", &numbers2[aI][bJ]);
            }
        }

    int array[x] = numbers1[i][j] * numbers2[aI][bJ]; 
    printf("%d", array[x]);

    return 0;
}

//6 da listaMatrizBi
#include <stdio.h>
#include <stdlib.h>

int main() {
    int rows1, cols1, rows2, cols2;
    printf("Informe o número de linhas e colunas do primeiro array: ");
    scanf("%d %d", &rows1, &cols1);
    printf("Informe o número de linhas e colunas do segundo array: ");
    scanf("%d %d", &rows2, &cols2);

    // Alocar memória para os arrays bidimensionais
    double **array1 = (double **)malloc(rows1 * sizeof(double *));
    double **array2 = (double **)malloc(rows2 * sizeof(double *));
    for(int i = 0; i < rows1; i++) {
        array1[i] = (double *)malloc(cols1 * sizeof(double));
    }
    for(int i = 0; i < rows2; i++) {
        array2[i] = (double *)malloc(cols2 * sizeof(double));
    }

    // Preencher os arrays com valores fornecidos pelo usuário
    printf("Informe os valores para o primeiro array:\n");
    for(int i = 0; i < rows1; i++) {
        for(int j = 0; j < cols1; j++) {
            scanf("%lf", &array1[i][j]);
        }
    }
    printf("Informe os valores para o segundo array:\n");
    for(int i = 0; i < rows2; i++) {
        for(int j = 0; j < cols2; j++) {
            scanf("%lf", &array2[i][j]);
        }
    }

    // Contar elementos negativos e não-negativos
    int count_negative = 0, count_non_negative = 0;
    for(int i = 0; i < rows1; i++) {
        for(int j = 0; j < cols1; j++) {
            if(array1[i][j] < 0) {
                count_negative++;
            } else {
                count_non_negative++;
            }
        }
    }
    for(int i = 0; i < rows2; i++) {
        for(int j = 0; j < cols2; j++) {
            if(array2[i][j] < 0) {
                count_negative++;
            } else {
                count_non_negative++;
            }
        }
    }

    // Criar array unidimensional
    double *result = (double *)malloc((count_negative + count_non_negative) * sizeof(double));
    int index_negative = 0, index_non_negative = count_negative;
    for(int i = 0; i < rows1; i++) {
        for(int j = 0; j < cols1; j++) {
            if(array1[i][j] < 0) {
                result[index_negative++] = array1[i][j];
            } else {
                result[index_non_negative++] = array1[i][j];
            }
        }
    }
    for(int i = 0; i < rows2; i++) {
        for(int j = 0; j < cols2; j++) {
            if(array2[i][j] < 0) {
                result[index_negative++] = array2[i][j];
            } else {
                result[index_non_negative++] = array2[i][j];
            }
        }
    }

    // Exibir o array resultante
    printf("Array resultante:\n");
    for(int i = 0; i < count_negative + count_non_negative; i++) {
        printf("%lf ", result[i]);
    }
    printf("\n");

    // Liberar memória alocada
    for(int i = 0; i < rows1; i++) {
        free(array1[i]);
    }
    free(array1);
    for(int i = 0; i < rows2; i++) {
        free(array2[i]);
    }
    free(array2);
    free(result);

    return 0;
}


//imprimir a diagonal de um array

#include <stdio.h>



int main(){
  //int array[4];
  int arr[4][4]= {
      {1, 2, 4, 8},
      {10, 12, 42, 44},
      {21, 28, 25, 17},
      {31, 32, 34, 37},
    };
    for (int i=0; i<4; i++){
       printf("%d\n", arr[i][i]);
    }
    
    return 0;
}


#include <stdio.h>

void transpose(int matriz[3][3], int transposta[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            transposta[j][i] = matriz[i][j];
        }
    }
}

int main() {
    int matriz[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    int transposta[3][3];

    transpose(matriz, transposta);

    printf("Matriz Original:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    printf("Matriz Transposta:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", transposta[i][j]);
        }
        printf("\n");
    }

    return 0;
}
